"use strict";
var CoveoIPX;

(() => {
    var ipxContext = {};

    const flattenJSON = (initialObject = {}, returnObject = {}, keyPrefix = '') => {
  for (const key in initialObject) {
    if (typeof initialObject[key] !== 'object') {
      returnObject[keyPrefix + key] = initialObject[key];
    } else {
      flattenJSON(initialObject[key], returnObject, `${keyPrefix}${key}.`);
    }
  }
  return returnObject;
};


    CoveoIPX = {
        addContext: async (additionalContext) => {
            const { loadContextActions } = await import('https://static.cloud.coveo.com/atomic/v2/headless/headless.esm.js');
            const flattenedAdditionalContext = flattenJSON(additionalContext)

            ipxContext = {...ipxContext, ...flattenedAdditionalContext}

            const ipxContainerShadowRoot = document.querySelector('#coveo-ipx-86b53190-8827-4997-aab6-fca6ecdcf92d')?.shadowRoot;
            if (!ipxContainerShadowRoot) {
                return;
            }
            const engines = [
                ipxContainerShadowRoot.getElementById(`ipx-search-86b53190-8827-4997-aab6-fca6ecdcf92d`)?.engine,
                ipxContainerShadowRoot.getElementById(`ipx-recs-86b53190-8827-4997-aab6-fca6ecdcf92d`)?.engine
            ];


            Object.entries(flattenedAdditionalContext).forEach(([contextKey, contextValue]) => {
                engines?.forEach(engine => {
                    const action = loadContextActions(engine)
                        .addContext({
                            contextKey,
                            contextValue,
                        });
                     engine.dispatch(action);
                })
            });
        },

        initialize: async (token, context = {}) => {
            const addAtomic = () => {
                if (window.CoveoAtomic && window.CoveoAtomic.version?.startsWith("v2.40".substring(0, "v2.40".lastIndexOf('.')))) {
                    console.warn(`IPX uses version v2.40 of Atomic and version ${window.CoveoAtomic} is already loaded in the site. Some unexpected behaviour might be experienced.`);
                }
                return new Promise((resolve, reject) => {
                    const script = document.createElement("script");
                    script.type = "module";
                    script.onload = resolve;
                    script.src = "https://static.cloud.coveo.com/atomic/v2.40/atomic.esm.js";
                    document.head.appendChild(script);
                });
            };
            const addCoveoThemeLink = () =>
                new Promise((resolve, reject) => {
                    const coveoThemeLink = document.createElement("link");
                    coveoThemeLink.rel = "stylesheet";
                    coveoThemeLink.onload = resolve;
                    coveoThemeLink.href = "https://static.cloud.coveo.com/atomic/v2.40/themes/coveo.css";
                    document.head.appendChild(coveoThemeLink);
                });
            const ATOMIC_SEARCH_INTERFACE = 'atomic-search-interface';
const ATOMIC_RECS_INTERFACE = 'atomic-recs-interface';
const IPX_CONTAINER_TAG = 'coveo-ipx';
const HEADLESS_URL = 'https://static.cloud.coveo.com/atomic/v2/headless/headless.esm.js';

const setContext = async (engine, additionalContext, config) => {
  const { loadContextActions } = await import(HEADLESS_URL);
  const baseContext = {
    IPX: true,
    referrer: window.location.href,
    IPX_ID: config.interfaceId,
    IPX_Name: config.interfaceName,
  };
  const flattenedAdditionalContext = flattenJSON(additionalContext);
  const action = loadContextActions(engine).setContext({ ...flattenedAdditionalContext, ...baseContext });
  return engine.dispatch(action);
};

const overwriteOriginLevel2 = async (engine, originLevel2) => {
  const { loadConfigurationActions } = await import(HEADLESS_URL);
  const action = loadConfigurationActions(engine).setOriginLevel2({
    originLevel2,
  });
  return engine.dispatch(action);
};

const initializeAtomicInterface = async (currentInterface, isRecommendations, config, apiKey, additionalContext) => {
  const commonConfig = {
    accessToken: apiKey,
    organizationId: config.organization,
    organizationEndpoints: await currentInterface.getOrganizationEndpoints(config.organization, config.environment),
    analytics: {
      originContext: 'nextgenipx',
      originLevel3: window.location.href,
    },
  };
  const searchHubSetting = { searchHub: config.searchHub };
  isRecommendations
    ? await currentInterface.initialize({ ...commonConfig, ...searchHubSetting })
    : await currentInterface.initialize({ ...commonConfig, ...{ search: searchHubSetting } });
  return setContext(currentInterface.engine, additionalContext, config);
};

const loadRecommendations = (interfaceId) => {
  const recsInterface = document
    .querySelector(`#coveo-ipx-${interfaceId}`)
    .shadowRoot.getElementById(`ipx-recs-${interfaceId}`);
  recsInterface.getRecommendations();
  if (this.onclick) {
    this.onclick = null;
  }
};

const initializeIPX = async (ipxContainerShadowRoot, config, apiKey, additionalContext) => {
  await Promise.all([
    customElements.whenDefined(ATOMIC_SEARCH_INTERFACE),
    customElements.whenDefined(ATOMIC_RECS_INTERFACE)
  ]);
  const searchInterface = ipxContainerShadowRoot.getElementById(`ipx-search-${config.interfaceId}`);
  const recsInterface = ipxContainerShadowRoot.getElementById(`ipx-recs-${config.interfaceId}`);


  await Promise.all([
    initializeAtomicInterface(searchInterface, false, config, apiKey, additionalContext),
    initializeAtomicInterface(recsInterface, true, config, apiKey, additionalContext)
  ]);
  await overwriteOriginLevel2(recsInterface.engine, "Recommended");
  searchInterface.i18n.addResourceBundle('en', 'caption-filetype', {
    '.html': 'html',
  });

  const ipxButton = searchInterface.querySelector('atomic-ipx-button')?.shadowRoot?.querySelector('button');
  if (ipxButton) {
    ipxButton.setAttribute('onclick', `(${loadRecommendations.toString()})('${config.interfaceId}')`);
  } else {
    loadRecommendations(config.interfaceId);
  }
  return;
};

const insertIPXInTargetElement = (targetElement, usesTargetSelector, interfaceId, atomicBody) => {
  const ipxContainer = document.createElement(IPX_CONTAINER_TAG);
  ipxContainer.setAttribute('id', `${IPX_CONTAINER_TAG}-${interfaceId}`);
  usesTargetSelector && ipxContainer.setAttribute('style', 'display: block; height: inherit; width: inherit;');

  const shadowRoot = ipxContainer.attachShadow({ mode: 'open' });
  shadowRoot.innerHTML = atomicBody;

  targetElement.appendChild(ipxContainer);
  return shadowRoot;
};

const watchForTargetElementDeletion = (apiKey, config) => {
  const deletionObserver = new MutationObserver(() => {
    if (!document.querySelector(config.targetSelector)) {
      deletionObserver.disconnect();
      loadIPX(apiKey, config);
    }
  });
  deletionObserver.observe(document.body, { childList: true, subtree: true });
};

const targetHostElement = (targetSelector) =>
  new Promise((resolve) => {
    let targetElement = document.querySelector(targetSelector);
    if (targetElement) {
      return resolve(targetElement);
    }
    const hostObserver = new MutationObserver(() => {
      targetElement = document.querySelector(targetSelector);
      if (!targetElement) {
        return;
      }
      hostObserver.disconnect();
      resolve(targetElement);
    });
    hostObserver.observe(document.body, { childList: true, subtree: true });
  });

const retrieveTarget = (usesTargetSelector, targetSelector) =>
  usesTargetSelector ? targetHostElement(targetSelector) : Promise.resolve(document.body);

const loadIPX = (apiKey, config) => {
  const { usesTargetSelector, targetSelector, interfaceId, atomicBody } = config;
  return retrieveTarget(usesTargetSelector, targetSelector).then((target) => {
    const ipxShadowRoot = insertIPXInTargetElement(target, usesTargetSelector, interfaceId, atomicBody);
    usesTargetSelector && watchForTargetElementDeletion(apiKey, config);
    return initializeIPX(ipxShadowRoot, config, apiKey, ipxContext);
  });
};

const waitForPageInitialization = () =>
  new Promise((resolve) => {
    if (document.body) {
      return resolve();
    }
    const bodyObserver = new MutationObserver(() => {
      bodyObserver.disconnect();
      resolve();
    });
    bodyObserver.observe(document.documentElement, { childList: true });
  });

const initialize = (apiKey, context, config) => {
  ipxContext = context;
  return waitForPageInitialization().then(() => loadIPX(apiKey, config));
};


            await Promise.all([addAtomic(), addCoveoThemeLink()])

            return initialize(token, context, {
                usesTargetSelector: false,
                targetSelector: '',
                interfaceId: '86b53190-8827-4997-aab6-fca6ecdcf92d',
                searchHub: 'CommunityIPX',
                organization: 'sophosproduction72tlxjzh',
                platformUrl: '',
                interfaceName: 'CommunityIPX',
                environment: '',
                atomicBody: `<style>
    :root, :host {
  --atomic-primary: #1372ec;
  --atomic-primary-light: #1ba2ff;
  --atomic-primary-dark: #0d4fa5;
  --atomic-ring-primary: #1372ec80;
  --atomic-background: #ffffff;
  --atomic-on-background: #282829;
  --atomic-neutral: #e5e8e8;
  --atomic-neutral-light: #f3f6f6;
  --atomic-neutral-dark: #4e4f4f;
  --atomic-visited: #752e9c;
  --atomic-ipx-button: #1372ec;
  --atomic-ipx-button-light: #1ba2ff;
  --atomic-ipx-button-label: #ffffff;
  --atomic-font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui, helvetica neue, helvetica, Ubuntu, roboto, noto, arial, sans-serif;
}

    .search-section {
  width: 100%;
  display: flex;
  flex-wrap: wrap;
  grid-gap: 0.5rem;
  background: var(--atomic-neutral-light);
  box-sizing: border-box;
  min-width: 0;
}

.search-box {
  flex-grow: 1;
  padding-bottom: 0.875rem;
}

.query-summary {
  padding-bottom: 1rem;
}

atomic-did-you-mean, atomic-notifications, atomic-smart-snippet, atomic-smart-snippet-suggestions {
  padding-bottom: 1rem;
}

atomic-smart-snippet::part(source-url), atomic-smart-snippet-suggestions::part(source-url) {
  word-wrap: break-word;
}

.pagination-more-results {
  padding-top: 0.875rem;
}

.footer-slot {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.footer-link {
  color: var(--atomic-primary);
  text-decoration: none;
}

.footer-link:hover {
  text-decoration: underline;
}

.footer-icon {
  aspect-ratio: auto;
  height: 1.25rem;
  align-items: center;
  display: flex;
}

div::part(header) {
  min-width: 0;
}

atomic-ipx-tabs {
  width: 100%;
}

#ipx-search-86b53190-8827-4997-aab6-fca6ecdcf92d:not(.atomic-search-interface-search-executed)
  > :is(atomic-ipx-modal, atomic-ipx-embedded)
  > div[slot='body']
  > atomic-layout-section
  > :is(atomic-result-list, atomic-query-summary) {
  display: none;
}

#ipx-search-86b53190-8827-4997-aab6-fca6ecdcf92d:is(.atomic-search-interface-search-executed, .atomic-search-interface-error)
  > :is(atomic-ipx-modal, atomic-ipx-embedded)
  > div[slot='body']
  > atomic-recs-interface#ipx-recs-86b53190-8827-4997-aab6-fca6ecdcf92d
  > atomic-recs-list {
  display: none;
}

#ipx-search-86b53190-8827-4997-aab6-fca6ecdcf92d:not(.atomic-ipx-modal-opened)
  > atomic-ipx-modal,
#ipx-search-86b53190-8827-4997-aab6-fca6ecdcf92d:not(.atomic-modal-opened)
  > atomic-ipx-modal
  > div[slot='header']
  > atomic-ipx-refine-modal {
  display: none;
}

#ipx-search-86b53190-8827-4997-aab6-fca6ecdcf92d:not(.atomic-search-interface-search-executed)
  > :is(atomic-ipx-modal, atomic-ipx-embedded)
  > div[slot='header']
  > atomic-layout-section
  > atomic-ipx-refine-toggle {
  display: none;
}

#ipx-search-86b53190-8827-4997-aab6-fca6ecdcf92d:is(.atomic-search-interface-search-executed)
  > :is(atomic-ipx-modal, atomic-ipx-embedded)
  > div[slot='header']
  > atomic-layout-section
  > atomic-ipx-refine-toggle {
  display: block;
}

body:not(.atomic-ipx-modal-opened) div.builder_preview atomic-ipx-modal,
body:not(.atomic-modal-opened) div.builder_preview atomic-ipx-refine-modal {
  display: none;
}

atomic-ipx-button::part(ipx-button) {
  background-color: var(--atomic-ipx-button);
  text-overflow: ellipsis;
  max-width: var(--atomic-ipx-width, 31.25rem);
}

atomic-ipx-button::part(ipx-button):hover {
  background-color: var(--atomic-ipx-button-light);
}
atomic-ipx-button::part(button-text) {
  color: var(--atomic-ipx-button-label);
}

atomic-ipx-button::part(button-icon) {
  padding-bottom: 1.15rem;
}

/* Delete this when SVCINT-2287 is done--> */
atomic-ipx-button::part(ripple) {
  background-color: var(--atomic-ipx-button)!important;
}

div.builder_preview atomic-ipx-button[is-modal-open]::part(ipx-open-icon) {
  opacity: 0;
  transition: 0.25s ease-in-out;
}

atomic-ipx-modal {
  z-index: 1000;
}

atomic-ipx-button::part(ipx-button) {
  z-index: 999;
}

#ipx-search-86b53190-8827-4997-aab6-fca6ecdcf92d.atomic-search-interface-error atomic-recs-error {
  display: none;
}

atomic-generated-answer::part(citation) {
  --max-citation-width: 150px;
}


    atomic-recs-list::part(label) {
  font-size: var(--atomic-text-2xl);
  padding-top: 0.75rem;
  margin-bottom: 2.5rem;
  color: var(--atomic-on-background);
}

atomic-recs-list::part(result-list) {
  gap: 1rem;
}

atomic-recs-list::part(result-list-grid-clickable) {
  inset: unset;
}
</style>
<atomic-search-interface id="ipx-search-86b53190-8827-4997-aab6-fca6ecdcf92d" fields-to-include='["sophossourcetype","sitemapsophosproductname","sitemapsophosproductversion"]' reflect-state-in-url='false'>
    <atomic-ipx-modal is-open="false" no-focus-trap="false">
    <div slot="header">
  <atomic-layout-section class="search-section" section="search">
    <atomic-search-box class="search-box"></atomic-search-box>
    <atomic-ipx-refine-toggle></atomic-ipx-refine-toggle>
    </atomic-layout-section>

</div>

    <div slot="body">
  <atomic-layout-section section="status">
    <atomic-breadbox></atomic-breadbox>
    <atomic-query-summary class="query-summary"></atomic-query-summary>
    <atomic-did-you-mean></atomic-did-you-mean>
    <atomic-notifications></atomic-notifications>
</atomic-layout-section>

  <atomic-layout-section section="results">
    <atomic-smart-snippet exportparts="source-url"></atomic-smart-snippet>
        <atomic-smart-snippet-suggestions exportparts="source-url"></atomic-smart-snippet-suggestions>
    <atomic-result-list image-size="none">
        <atomic-result-template
    >
    <template>
        <style>
    .field {
        display: inline-flex;
        align-items: center;
    }

    .field-label {
        font-weight: bold;
        margin-right: 0.25rem;
    }

    .thumbnail {
        display: none;
        width: 100%;
        height: 100%;
    }

    .icon {
        display: none;
    }

    .result-root.image-small .thumbnail,
    .result-root.image-large .thumbnail {
        display: inline-block;
    }

    .result-root.image-icon .icon {
        display: inline-block;
    }

    .result-root.image-small atomic-result-section-visual,
    .result-root.image-large atomic-result-section-visual {
        border-radius: var(--atomic-border-radius-xl);
    }

    .badge-sophossourcetype::part(result-badge-element) {
            background-color: #e4e3e3;
        }

        .badge-sophossourcetype::part(result-badge-label) {
                color: #000000;
            }
        @media (min-width: 1024px) {
        .result-root.with-sections.display-list.image-none.with-sections {
            grid-template-areas: "badges . ."
                                "title title actions"
                                "title-metadata title-metadata title-metadata"
                                "emphasized emphasized emphasized"
                                "excerpt excerpt excerpt"
                                "bottom-metadata bottom-metadata bottom-metadata"
                                "children children children";
            align-items: center;
        }
    }

    @media (min-width: 1024px) {
        .result-root.with-sections.display-list.image-none.with-sections atomic-result-section-excerpt {
            margin-top: 0.75rem;
        }
    }

    @media (min-width: 1024px) {
        .result-root.with-sections.display-list.image-none.density-normal atomic-result-section-actions {
            margin-bottom: 0;
            line-height: 0px;
        }
    }

</style>
<atomic-result-section-badges>
    <atomic-result-badge class="badge-sophossourcetype" field="sophossourcetype"></atomic-result-badge>
    </atomic-result-section-badges>
<atomic-result-section-title>
    <atomic-result-link>
        <a slot="attributes" target="_blank"></a>
    </atomic-result-link>
</atomic-result-section-title>
<atomic-result-section-title-metadata></atomic-result-section-title-metadata>
<atomic-result-section-excerpt>
    <atomic-result-text field="excerpt"></atomic-result-text>
</atomic-result-section-excerpt>
<atomic-result-section-bottom-metadata>
    <atomic-result-fields-list>
        <atomic-field-condition class="field" if-defined="sitemapsophosproductname">
                <atomic-result-text field="sitemapsophosproductname"></atomic-result-text>
                </atomic-field-condition>
        </atomic-result-fields-list>
</atomic-result-section-bottom-metadata>

    </template>
</atomic-result-template>

        </atomic-result-list>
    <atomic-no-results></atomic-no-results>
    <atomic-query-error></atomic-query-error>
</atomic-layout-section>
<atomic-layout-section section="pagination">
    <atomic-load-more-results class="pagination-more-results"></atomic-load-more-results>
</atomic-layout-section>


  <atomic-recs-interface id="ipx-recs-86b53190-8827-4997-aab6-fca6ecdcf92d" fields-to-include='["sophossourcetype","sitemapsophosproductname","sitemapsophosproductversion"]' analytics="true" >
  <atomic-recs-list grid-cell-link-target="_blank"  image-size="none" label="Based on your recent activities, these documents might help you" number-of-recommendations="5">
    <atomic-recs-result-template
        >
        <template>
            <style>
@media (min-width: 1024px) {
    .result-root.with-sections.display-list.density-normal.image-none atomic-result-section-title {
        font-weight: bold;
        --font-size: var(--atomic-text-lg);
        --atomic-line-height-ratio: 1.3;
    }
}

atomic-result-link {
    font-size: var(--atomic-text-base);
}

atomic-result-link p {
    display: flex;
    align-items: center;
}

atomic-result-section-bottom-metadata atomic-result-link a {
    color: #1372EC;
}

atomic-result-section-bottom-metadata atomic-result-link a:visited {
    color: var(--atomic-visited);
}

.result-root.with-sections.display-list.density-normal.image-none atomic-result-section-excerpt {
    margin-top: 0.4rem;
}

.result-root.with-sections.display-list.density-normal.image-none atomic-result-section-bottom-metadata {
    margin-top: 0.5rem;
}

</style>
<atomic-result-section-title>
    <atomic-result-text field="title"></atomic-result-text>
</atomic-result-section-title>
<atomic-result-section-title-metadata></atomic-result-section-title-metadata>
<atomic-result-section-excerpt>
    <atomic-result-text field="excerpt"></atomic-result-text>
</atomic-result-section-excerpt>
<atomic-result-section-bottom-metadata>
    <atomic-result-link>
        <p slot="">Learn more
            <span class="arrowhead-right">
                <svg width="17" height="16" viewBox="0 0 17 16" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M7.02682 12.2426L11.2695 8L7.02682 3.75736" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"/>
                </svg>
            </span>
        </p>
        <a slot="attributes" target="_blank"></a>
    </atomic-result-link>
</atomic-result-section-bottom-metadata>

        </template>
      </atomic-recs-result-template>
    </atomic-recs-list>
  <atomic-recs-error></atomic-recs-error>
</atomic-recs-interface>

  </div>

    
    <atomic-layout-section section="facets">
    <atomic-facet field="sophossourcetype" label="Source" display-values-as="checkbox"></atomic-facet><atomic-facet field="sitemapsophosproductname" label="Product" display-values-as="checkbox"></atomic-facet><atomic-facet field="sitemapsophosproductversion" label="Version" display-values-as="checkbox"></atomic-facet>
    </atomic-layout-section>

</atomic-ipx-modal>

        <atomic-ipx-button label="" is-modal-open="false" exportparts="ipx-button"></atomic-ipx-button>

    </atomic-search-interface>
`,
            });
      },
    };
    window.CoveoIPX = CoveoIPX;
})();

